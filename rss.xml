<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Bougie's Blog]]></title>
        <description><![CDATA[Bougie's Blog, Bougie 的博客]]></description>
        <link>https://www.bougieblog.cn</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Wed, 08 Jun 2022 06:31:02 GMT</lastBuildDate>
        <atom:link href="https://www.bougieblog.cn/rss.xml" rel="self" type="application/rss+xml"/>
        <copyright><![CDATA[Bougie 2022]]></copyright>
        <language><![CDATA[zh-CN]]></language>
        <item>
            <title><![CDATA[云南之旅]]></title>
            <description><![CDATA[五一和几个同事去云南旅游了，也太漂亮了。暂时遗忘了社畜般的生活。]]></description>
            <link>https://www.bougieblog.cn/2022/05/08/%E4%BA%91%E5%8D%97%E4%B9%8B%E6%97%85/</link>
            <guid isPermaLink="true">https://www.bougieblog.cn/2022/05/08/%E4%BA%91%E5%8D%97%E4%B9%8B%E6%97%85/</guid>
            <pubDate>Sun, 08 May 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>五一和几个同事去云南旅游了，也太漂亮了。暂时遗忘了社畜般的生活。以下图片都已压缩。</p> <h2 id="大理"> 大理</h2> <p><img src="https://www.bougieblog.cn/images/2022/05/08/2.jpg" alt="苍山洱海" width="1200" height="900" loading="lazy"></p> <p>可以看到对面，但是想过去是真的远。骑车 5 公里只走了一点点，想去到对面估计得 50 公里以上。</p> <p><img src="https://www.bougieblog.cn/images/2022/05/08/8.jpg" alt="洱海一隅" width="1200" height="743" loading="lazy"></p> <p>晚上八点还有很多人在散步。</p> <p><img src="https://www.bougieblog.cn/images/2022/05/08/3.jpg" alt="大理古城" width="1200" height="900" loading="lazy"></p> <p>感觉一般，可能是天气不太好。里面很多绑脏辫的阿姨，吃的也一般，石板烧就是普通的铁板烧。</p> <h2 id="丽江"> 丽江</h2> <p><img src="https://www.bougieblog.cn/images/2022/05/08/4.jpg" alt="火车站" width="1200" height="900" loading="lazy"></p> <p>离开的时候拍的。</p> <h3 id="玉龙雪山"> 玉龙雪山</h3> <p><img src="https://www.bougieblog.cn/images/2022/05/08/6.jpg" alt="玉龙雪山栈道" width="1200" height="900" loading="lazy"></p> <p>在海拔 4000m 以上拍的，能见度很低。看来某游戏雪原还是很写实的，隔了几米就基本看不到。</p> <p><img src="https://www.bougieblog.cn/images/2022/05/08/01.jpg" alt="玉龙雪山远景" width="1200" height="900" loading="lazy"></p> <p>在蓝月谷玉液泉拍的，远看雪山真的惊艳。</p> <p><img src="https://www.bougieblog.cn/images/2022/05/08/5.jpg" alt="托雷特" width="1200" height="900" loading="lazy"></p> <p>纯纯的牛马，感觉它一直在坏笑。此时在<a href="https://tieba.baidu.com/p/7822009620?pid=143992351251&amp;cid=0#143992351251" target="_blank" rel="noopener noreferrer">贴吧发了个贴<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>，没想到有这么多回复。</p> <p><img src="https://www.bougieblog.cn/images/2022/05/08/7.jpg" alt="蓝月谷樱牛" width="1200" height="900" loading="lazy"></p> <iframe src="//player.bilibili.com/player.html?bvid=BV1mT4y1z7kT&amp;high_quality=1&amp;danmaku=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="allowfullscreen" class="bilibili-video"></iframe> <h3 id="丽江古城"> 丽江古城</h3> <p>网红之城。走几步就能看到一个拿着手机直播的。</p> <p><img src="https://www.bougieblog.cn/images/2022/05/08/9.jpg" alt="古城观景台" width="1200" height="900" loading="lazy"></p> <p>感觉对面的台子更高一点。</p> <p><img src="https://www.bougieblog.cn/images/2022/05/08/10.jpg" alt="古城公交车站" width="1200" height="900" loading="lazy"></p> <p>古城旁边的一个公交车站，和古城中间隔着一座小山丘。比起古城，这里更吸引我，在这里坐了半个小时看天空。</p> <h3 id="泸沽湖"> 泸沽湖</h3> <p>同事拍的，作为社畜提前回去加班了。</p> <p><img src="https://www.bougieblog.cn/images/2022/05/08/11.jpg" alt="水天一色" width="1200" height="900" loading="lazy"></p> <p>据说位于四川和云南的交界线，回来后听一个同事说他家位于四川这个湖附近。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[聚合云（iOS版）封笔]]></title>
            <description><![CDATA[最近工作一直是用 JS 做跨端应用，一直做不到原生应用的相应速度，性能上与原生开发相去甚远。因此抽空学了下 Apple 的 Swift UI 开发原生 App，能同时兼容 iOS、iPad OS、Mac OS，此处记录下成果。]]></description>
            <link>https://www.bougieblog.cn/2022/04/14/%E8%81%9A%E5%90%88%E4%BA%91-ios%E7%89%88-%E5%B0%81%E7%AC%94/</link>
            <guid isPermaLink="true">https://www.bougieblog.cn/2022/04/14/%E8%81%9A%E5%90%88%E4%BA%91-ios%E7%89%88-%E5%B0%81%E7%AC%94/</guid>
            <pubDate>Thu, 14 Apr 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="前言"> 前言</h2> <p>最近工作一直是用 JS 做跨端应用，一直做不到原生应用的相应速度，性能上与原生开发相去甚远。因此抽空学了下 Apple 的 Swift UI 开发原生 App，能同时兼容 iOS、iPad OS、Mac OS。我学东西一直秉承实用性的原则，不会从浅到深的慢慢去了解原理、写 demo，因此直接写了我一直想做的 App。</p> <p>做得是一款咨询订阅类 App，和常规 Feed 流订阅不同的地方是：除了支持图文内容外，还<strong>支持纯视频、纯图片的展示，并且对不同内容的列表做了差异化化处理</strong>。缺点是需要写代码添加订阅内容。此处记录下成果。</p> <h2 id="功能一览"> 功能一览</h2> <p>主打内容订阅，已添加了我常看的内容</p> <div class="spinner" style="background:rgb(66, 185, 131);" data-v-3c5b51fe=""></div><h2 id="订阅配置"> 订阅配置</h2> <p>配置结构如下</p> <div class="spinner" style="background:rgb(66, 185, 131);" data-v-3c5b51fe=""></div><p>Converter Function 类型如下：</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token comment">// search 为 list converter 的基础上加一个 keyword 参数</span>
<span class="token keyword">type</span> <span class="token class-name">FeedListConverter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> FeedItem<span class="token punctuation">[</span><span class="token punctuation">]</span>
  nextPage<span class="token operator">:</span> <span class="token builtin">string</span>
  isEnd<span class="token operator">:</span> <span class="token builtin">string</span>
  isError<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">FeedDetailConverter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>itemData<span class="token operator">:</span> FeedItem<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> FeedDetail
  isError<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>FeedItem</code> 为列表展示的数据，主要包括标题、封面，给 Detail 请求所需要用到的数据。<code>FeedDetail</code> 为详情页展示需要用到的数据，不同的 <code>DetailStyle</code> 有不同的展示样式。</p> <h2 id="截图展示"> 截图展示</h2> <p>花费了很多心血，实现了类似抖音的效果</p> <div style="display:flex;overflow:scroll;"><img src="https://www.bougieblog.cn/images/2022/04/14/WechatIMG113.jpeg" style="width:240px;margin-right:10px;"> <img src="https://www.bougieblog.cn/images/2022/04/14/WechatIMG115.jpeg" style="width:240px;margin-right:10px;"> <img src="https://www.bougieblog.cn/images/2022/04/14/WechatIMG116.jpeg" style="width:240px;margin-right:10px;"> <img src="https://www.bougieblog.cn/images/2022/04/14/WechatIMG114.jpeg" style="width:240px;margin-right:10px;"> <img src="https://www.bougieblog.cn/images/2022/04/14/WechatIMG117.jpeg" style="width:240px;margin-right:10px;"> <img src="https://www.bougieblog.cn/images/2022/04/14/WechatIMG118.jpeg" style="width:240px;margin-right:10px;"></div> <h2 id="后记"> 后记</h2> <ul><li>平常工作用跨端技术做出来的都是 💩，卡的不行。用了原生确实性能不错，如果能稳定点就好了</li> <li>充了一年 Apple 开发者会费（竟然要六百多 🤡）。本想着发到 App Store，结果升级 iOS 15 之后出了一堆 Bug</li> <li>发到了 Test Flight，发正式审核非常严格。由于内容都是盗的，估计也过不了审</li> <li>以后不会更新了，现在看来我自己觉得这 App 也没什么用。至于为什么要做？只能说是一时兴起</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[艾尔登法环通关纪念]]></title>
            <description><![CDATA[纪念下第一个全成就的游戏]]></description>
            <link>https://www.bougieblog.cn/2022/03/21/%E8%89%BE%E5%B0%94%E7%99%BB%E6%B3%95%E7%8E%AF%E9%80%9A%E5%85%B3%E7%BA%AA%E5%BF%B5/</link>
            <guid isPermaLink="true">https://www.bougieblog.cn/2022/03/21/%E8%89%BE%E5%B0%94%E7%99%BB%E6%B3%95%E7%8E%AF%E9%80%9A%E5%85%B3%E7%BA%AA%E5%BF%B5/</guid>
            <pubDate>Mon, 21 Mar 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>因疫情小区封闭了快一个月，期间通关了这款游戏。是我心中的完美游戏了，史诗感拉满。以下均为时机截图 👀</p> <h2 id="魔法学院-·-雷亚卢卡利亚"> 魔法学院 · 雷亚卢卡利亚</h2> <p><img src="https://www.bougieblog.cn/images/2022/03/21/3.jpeg" alt="杜鹃教堂" width="1200" height="675" loading="lazy"></p> <p>初到这里感觉太奇幻了</p> <p><img src="https://www.bougieblog.cn/images/2022/05/10/2.png" alt="远眺魔法学院" width="1200" height="675" loading="lazy"></p> <p>四钟楼远眺</p> <p><img src="https://www.bougieblog.cn/images/2022/05/10/3.png" alt="结缘教堂" width="1200" height="676" loading="lazy"></p> <p>女王楼下的传送门可快速到达</p> <h2 id="地底世界"> 地底世界</h2> <p><img src="https://www.bougieblog.cn/images/2022/03/21/1.jpeg" alt="永恒之城 · 洛克隆恩" width="1200" height="675" loading="lazy"></p> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1925053404&amp;auto=0&amp;height=66" class="wyy-music"></iframe> <p>对面是鲜血王朝</p> <p><img src="https://www.bougieblog.cn/images/2022/03/21/5.jpeg" alt="下有大朵灵依墓地铃兰" width="1200" height="675" loading="lazy"></p> <p>诺克史黛拉的龙人士兵 Boss 战背景</p> <p><img src="https://www.bougieblog.cn/images/2022/05/10/5.png" alt="永夜神域" width="1200" height="676" loading="lazy"></p> <p>前面可以拿到猎杀指头刀</p> <h2 id="王城-·-罗德尔"> 王城 · 罗德尔</h2> <p><img src="https://www.bougieblog.cn/images/2022/03/21/4.jpeg" alt="古兰桑克斯" width="1200" height="675" loading="lazy"></p> <p>还是兰斯桑克斯来着</p> <p><img src="https://www.bougieblog.cn/images/2022/05/10/4.png" alt="蜜雪冰城" width="1200" height="676" loading="lazy"></p> <h2 id="天空之城-逐渐崩毁的法姆-·-亚兹拉"> 天空之城 - 逐渐崩毁的法姆 · 亚兹拉</h2> <p><img src="https://www.bougieblog.cn/images/2022/03/21/2.jpeg" alt="风暴中心" width="1200" height="675" loading="lazy"></p> <p>到达中心躺下后可以时光倒流到龙王 Boss 战</p> <h2 id="侯王礼拜堂"> 侯王礼拜堂</h2> <p><img src="https://www.bougieblog.cn/images/2022/05/10/1.png" alt="玛丽卡女王" width="1200" height="675" loading="lazy"></p> <p>烧树后能看到天空中的灰烬</p> <p><img src="https://www.bougieblog.cn/images/2022/05/10/6.png" alt="指头女巫" width="1200" height="676" loading="lazy"></p> <p>这里好多老哥成王后自杀了 😭</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[小星星]]></title>
            <description><![CDATA[小星星口琴曲谱]]></description>
            <link>https://www.bougieblog.cn/2020/11/09/%E5%B0%8F%E6%98%9F%E6%98%9F/</link>
            <guid isPermaLink="true">https://www.bougieblog.cn/2020/11/09/%E5%B0%8F%E6%98%9F%E6%98%9F/</guid>
            <pubDate>Mon, 09 Nov 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="https://www.bougieblog.cn/images/2020/11/09/3.png" alt="" width="1200" height="848" loading="lazy"></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React Native之原理浅析]]></title>
            <description><![CDATA[React Native 原理简述]]></description>
            <link>https://www.bougieblog.cn/2020/09/18/react-native%E4%B9%8B%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</link>
            <guid isPermaLink="true">https://www.bougieblog.cn/2020/09/18/react-native%E4%B9%8B%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</guid>
            <pubDate>Fri, 18 Sep 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="https://www.bougieblog.cn/images/2020/09/18/1.jpg" alt="" width="1200" height="630" loading="lazy"></p> <h2 id="一、javascriptcore"> 一、JavaScriptCore</h2> <blockquote><p>讲 React Native 之前，了解 JavaScriptCore 会有帮助，也是必要的。React Native 的核心驱动力就来自于 JS Engine. 你写的所有 JS 和 JSX 代码都会被 JS Engine 来执行, 没有 JS Engine 的参与，你是无法享受 ReactJS 给原生应用开发带来的便利的。在 iOS 上，默认的就是 JavaScriptCore， iOS 7 之后的设备都支持. iOS 不允许用自己的 JS Engine. JavaScriptCore 来自于 WebKit, 所以，安卓上默认也是用 JavaScriptCore</p></blockquote> <blockquote><p>你深入了解<code>React Native</code>的第一站应该是 <code>JavaScriptCore</code></p></blockquote> <ul><li><code>JavaScriptCore</code>在<code>iOS</code>平台上给<code>React Native</code>提供的接口也仅限于那几个接口，你弄明白了<code>JavaScriptCore</code>那几个接口, React Native 剩下的魔法秘密都可以顺藤摸瓜来分析了。</li> <li>接下来要讲解的就是 Facebook 围绕这几个接口以及用一个 React 来颠覆整个 native 开发所做的精妙设计和封装</li></ul> <h2 id="二、浏览器工作原理"> 二、浏览器工作原理</h2> <ul><li>浏览器通过<code>Dom Render</code>来渲染所有的元素.</li> <li>浏览器有一整套的 UI 控件，样式和功能都是按照 html 标准实现的</li> <li>浏览器能读懂 html 和 css。</li> <li>html 告诉浏览器绘制什么控件(html tag)，css 告诉浏览器每个类型的控件(html tag)具体长什么样。</li> <li>浏览器的主要作用就是通过解析 html 来形成 dom 树，然后通过 css 来点缀和装饰树上的每一个节点</li></ul> <p><strong>UI 的描述和呈现分离开了</strong></p> <ol><li>html 文本描述了页面应该有哪些功能，css 告诉浏览器该长什么样。</li> <li>浏览器引擎通过解析 html 和 css，翻译成一些列的预定义 UI 控件，</li> <li>然后 UI 控件去调用操作系统绘图指令去绘制图像展现给用户。</li> <li>Javascript 可有可无，主要用于 html 里面一些用户事件响应，DOM 操作、异步网络请求和一些简单的计算</li></ol> <blockquote><p>在 react native 里面，1 和 2 是不变的，也是用 html 语言描述页面有哪些功能，然后 stylesheet 告诉浏览器引擎每个控件应该长什么样。并且和浏览器用的是同一个引擎</p></blockquote> <blockquote><p>在步骤 3 里面 UI 控件不再是浏览器内置的控件，而是<code>react native</code>自己实现的一套 UI 控件（两套，android 一套，ios 一套），这个切换是在<code>MessageQueque</code>中进行的，并且还可以发现，他们 tag 也是不一样的</p></blockquote> <p><strong>Javascript 在 react native 里面非常重要</strong></p> <ul><li>它负责管理 UI component 的生命周期，管理 Virtual DOM</li> <li>所有业务逻辑都是用 javascript 来实现或者衔接</li> <li>调用原生的代码来操纵原生组件。</li> <li>Javascript 本身是无绘图能力的，都是通过给原生组件发指令来完成</li></ul> <h2 id="三、react-native-架构"> 三、React Native 架构</h2> <p><img src="https://poetries1.gitee.io/img-repo/2019/10/680.jpeg" alt="" loading="lazy"></p> <ul><li>绿色的是我们应用开发的部分。我们写的代码基本上都是在这一层</li> <li>蓝色代表公用的跨平台的代码和工具引擎，一般我们不会动蓝色部分的代码</li> <li>黄色代码平台相关的代码，做定制化的时候会添加修改代码。不跨平台，要针对平台写不同的代码。iOS 写 OC, android 写 java，web 写 js. 每个 bridge 都有对应的 js 文件，js 部分是可以共享的，写一份就可以了。如果你想做三端融合，你就得理解这一个东西。如果你要自己定制原生控件，你就得写 bridge 部分</li> <li>红色部分是系统平台的东西。红色上面有一个虚线，表示所有平台相关的东西都通过 bridge 隔离开来了</li> <li>大部分情况下我们只用写绿色的部分，少部分情况下会写黄色的部分。你如果对基础架构和开源感兴趣，你可以写蓝色部分，然后尝试给那些大的开源项目提交代码。红色部分是独立于 React Native 的</li></ul> <h2 id="四、react-native、react-和-javascriptcore-的关系"> 四、React Native、React 和 JavascriptCore 的关系</h2> <blockquote><p>React Native 最重要的三个概念应该就是<code>React Native</code>、<code>React</code>和<code>JavascriptCore</code></p></blockquote> <ul><li>React 是一个纯 JS 库，所有的 React 代码和所有其它的 js 代码都需要 JS Engine 来解释执行。因为种种原因，浏览器里面的 JS 代码是不允许调用自定义的原生代码的，而 React 又是为浏览器 JS 开发的一套库，所以，比较容易理解的事实是 React 是一个纯 JS 库，它封装了一套 Virtual Dom 的概念，实现了数据驱动编程的模式，为复杂的 Web UI 实现了一种无状态管理的机制, 标准的 HTML/CSS 之外的事情，它无能为力。调用原生控件，驱动声卡显卡，读写磁盘文件，自定义网络库等等，这是 JS/React 无能为力的</li> <li>你可以简单理解为 React 是一个纯 JS 函数， 它接受特定格式的字符串数据，输出计算好的字符串数据</li> <li>JS Engine 负责调用并解析运行这个函数</li> <li><code>React Native</code>呢？ 它比较复杂。复杂在哪里？前面我们说了 React 是纯 JS 库，意味着 React 只能运行 JS 代码，通过 JS Engine 提供的接口(Html Tag)绘制 html 支持的那些元素，驱动有限的声卡显卡。简单点说, React 只能做浏览器允许它做的事情, 不能调用原生接口， 很多的事情也只能干瞪眼</li></ul> <p><strong>React Native 它可不一样</strong></p> <ul><li>第一点，驱动关系不一样。前面我们说的是, JS Engine 来解析执行 React 脚本, 所以，React 由浏览器(最终还是 JS Engine)来驱动. 到了 React Native 这里，RN 的原生代码(Timer 和用户事件)驱动 JS Engine, 然后 JS Engine 解析执行 React 或者相关的 JS 代码，然后把计算好的结果返回给 Native code. 然后, Native code 根据 JS 计算出来的结果驱动设备上所有能驱动的硬件。重点，所有的硬件。也就是说，在 RN 这里，JS 代码已经摆脱 JS Engine(浏览器)的限制，可以调用所有原生接口啦</li> <li>第二点, 它利用 React 的 Virtual Dom 和数据驱动编程概念，简化了我们原生应用的开发, 同时，它不由浏览器去绘制，只计算出绘制指令，最终的绘制还是由原生控件去负责，保证了原生的用户体验</li></ul> <p><strong>React Native 组件结构</strong></p> <blockquote><p>驱动硬件的能力决定能一个软件能做多大的事情，有多大的主控性。研究过操作系统底层东西或者汇编的同学明白，我们大部分时候写的代码是受限的代码，很多特权指令我们是没法使用的，很多设备我们是不允许直接驱动的。我们现在的编程里面几乎已经没有人提中断了，没有中断，硬件的操作几乎会成为一场灾难.</p></blockquote> <p>在一定程度上，React Native 和 NodeJS 有异曲同工之妙。它们都是通过扩展 JavaScript Engine, 使它具备强大的本地资源和原生接口调用能力，然后结合 JavaScript 丰富的库和社区和及其稳定的跨平台能力，把 javascript 的魔力在浏览器之外的地方充分发挥出来</p> <p><strong>JavaScriptCore + ReactJS + Bridges 就成了 React Native</strong></p> <ul><li><code>JavaScriptCore</code>负责 JS 代码解释执行</li> <li><code>ReactJS</code>负责描述和管理<code>VirtualDom</code>,指挥原生组件进行绘制和更新，同时很多计算逻辑也在 js 里面进行。ReactJS 自身是不直接绘制 UI 的，UI 绘制是非常耗时的操作，原生组件最擅长这事情。</li> <li><code>Bridges</code>用来翻译 ReactJS 的绘制指令给原生组件进行绘制，同时把原生组件接收到的用户事件反馈给<code>ReactJS</code>。<br>
要在不同的平台实现不同的效果就可以通过定制<code>Bridges</code>来实现</li></ul> <blockquote><p>深入 <code>Bridge</code> 前面有提到, RN 厉害在于它能打通 JS 和 Native Code, 让 JS 能够调用丰富的原生接口,充分发挥硬件的能力, 实现非常复杂的效果,同时能保证效率和跨平台性。</p></blockquote> <blockquote><p>打通 RN 任督二脉的关键组件就是<code>Bridge</code>. 在 RN 中如果没有 Bridge, JS 还是那个 JS，只能调用 JS Engine 提供的有限接口，绘制标准 html 提供的那些效果,那些摄像头，指纹，3D 加速,声卡, 视频播放定制等等，JS 都只能流流口水，原生的、平台相关的、设备相关的效果做不了， 除非对浏览器进行定制</p></blockquote> <ul><li>Bridge 的作用就是给 RN 内嵌的 JS Engine 提供原生接口的扩展供 JS 调用。所有的本地存储、图片资源访问、图形图像绘制、3D 加速、网络访问、震动效果、NFC、原生控件绘制、地图、定位、通知等都是通过 Bridge 封装成 JS 接口以后注入 JS Engine 供 JS 调用。理论上，任何原生代码能实现的效果都可以通过 Bridge 封装成 JS 可以调用的组件和方法, 以 JS 模块的形式提供给 RN 使用。</li> <li>每一个支持 RN 的原生功能必须同时有一个原生模块和一个 JS 模块，JS 模块是原生模块的封装，方便 Javascript 调用其接口。Bridge 会负责管理原生模块和对应 JS 模块之间的沟通, 通过 Bridge, JS 代码能够驱动所有原生接口，实现各种原生酷炫的效果。</li> <li>RN 中 JS 和 Native 分隔非常清晰，JS 不会直接引用 Native 层的对象实例，Native 也不会直接引用 JS 层的对象实例(所有 Native 和 JS 互掉都是通过 Bridge 层会几个最基础的方法衔接的)。</li> <li><code>Bridge</code> 原生代码负责管理原生模块并生成对应的 JS 模块信息供 JS 代码调用。每个功能 JS 层的封装主要是针对 ReactJS 做适配，让原生模块的功能能够更加容易被用 ReactJS 调用。<code>MessageQueue.js</code>是<code>Bridge</code>在 JS 层的代理，所有 JS2N 和 N2JS 的调用都会经过<code>MessageQueue.js</code>来转发。JS 和 Native 之间不存在任何指针传递，所有参数都是字符串传递。所有的 instance 都会被在 JS 和 Native 两边分别编号，然后做一个映射,然后那个数字/字符串编号会做为一个查找依据来定位跨界对象。</li></ul> <h2 id="五、bridge-各模块简介"> 五、Bridge 各模块简介</h2> <h3 id="_5-1-rctrootview"> 5.1 RCTRootView</h3> <ul><li><code>RCTRootView</code>是<code>React Native</code>加载的地方,是万物之源。从这里开始，我们有了 JS Engine, JS 代码被加载进来，对应的原生模块也被加载进来，然后 js loop 开始运行。 js loop 的驱动来源是 Timer 和 Event Loop(用户事件). js loop 跑起来以后应用就可以持续不停地跑下去了。</li> <li>如果你要通过调试来理解 RN 底层原理，你也应该是从 RCTRootView 着手，顺藤摸瓜。</li> <li>每个项目的<code>AppDelegate.m</code>的- (BOOL)application:didFinishLaunchingWithOptions:里面都可以看到 RCTRootView 的初始化代码，RCTRootView 初始化完成以后，整个 React Native 运行环境就已经初始化好了，JS 代码也加载完毕，所有 React 的绘制都会有这个 RCTRootView 来管理。</li></ul> <p><strong>RCTRootView 做的事情如下</strong></p> <ul><li>创建并且持有<code>RCTBridge</code></li> <li>加载<code>JS Bundle</code>并且初始化 JS 运行环境.</li> <li>初始化 JS 运行环境的时候在 App 里面显示<code>loadingView</code>, 注意不是屏幕顶部的那个下拉悬浮进度提示条. RN 第一次加载之后每次启动非常快，很少能意识到这个加载过程了。loadingView 默认情况下为空, 也就是默认是没有效果的。loadingView 可以被自定义，直接覆盖 RCTRootView.loadingView 就可以了.开发模式下 RN app 第一次启动因为需要完整打包整个 js 所以可以很明显看到加载的过程，加载第一次以后就看不到很明显的加载过程了，可以执行下面的命令来触发重新打包整个 js 来观察<code>loadingView</code>的效果 <code>watchman watch-del-all &amp;&amp; rm -rf node_modules/ &amp;&amp; yarn install &amp;&amp; yarn start – –reset-cache</code>, 然后杀掉<code>app</code>重启你就会看到一个很明显的进度提示.</li> <li><code>JS</code>运行环境准备好以后把加载视图用<code>RCTRootContentView</code>替换加载视图</li> <li>有准备工作就绪以后调用<code>AppRegistry.runApplication</code>正式启动 RN JS 代码，从<code>Root Component()</code>开始 UI 绘制</li></ul> <blockquote><p>一个 App 可以有多个<code>RCTRootView</code>, 初始化的时候需要手动传输<code>Bridge</code>做为参数，全局可以有多个<code>RCTRootView</code>, 但是只能有一个<code>Bridge</code></p></blockquote> <blockquote><p>如果你做过<code>React Native</code>和原生代码混编，你会发现混编就是把<code>AppDelegate</code>里面那段初始化<code>RCTRootView</code>的代码移动到需要混编的地方，然后把<code>RCTRootView</code>做为一个普通的<code>subview</code>来加载到原生的<code>view</code>里面去，非常简单。不过这地方也要注意处理好单 Bridge 实例的问题，同时，混编里面要注意<code>RCTRootView</code>如果销毁过早可能会引发 JS 回调奔溃的问题</p></blockquote> <h3 id="_5-2-rctrootcontentview"> 5.2 RCTRootContentView</h3> <ul><li><code>RCTRootContentView reactTag</code>在默认情况下为 1. 在<code>Xcode view Hierarchy debugger</code> 下可以看到，最顶层为<code>RCTRootView</code>, 里面嵌套的是<code>RCTRootContentView</code>, 从<code>RCTRootContentView</code>开始，每个 View 都有一个<code>reactTag</code></li> <li><code>RCTRootView</code>继承自 UIView, RCTRootView 主要负责初始化<code>JS Environment</code>和 React 代码，然后管理整个运行环境的生命周期。 <code>RCTRootContentView</code>继承自<code>RCTView</code>, <code>RCTView</code>继承自 UIView, RCTView 封装了 React Component Node 更新和渲染的逻辑， <code>RCTRootContentView</code>会管理所有 react ui components. <code>RCTRootContentView</code>同时负责处理所有 touch 事件</li></ul> <h3 id="_5-3-rctbridge"> 5.3 RCTBridge</h3> <blockquote><p>这是一个加载和初始化专用类，用于前期 JS 的初始化和原生代码的加载</p></blockquote> <ul><li>负责加载各个 Bridge 模块供 JS 调用</li> <li>找到并注册所有实现了<code>RCTBridgeModule protocol</code>的类, 供 JS 后期使用.</li> <li>创建和持有 <code>RCTBatchedBridge</code></li></ul> <h3 id="_5-4-rctbatchedbridge"> 5.4 RCTBatchedBridge</h3> <blockquote><p>如果 RCTBridge 是总裁, 那么 RCTBatchedBridge 就是副总裁。前者负责发号施令，后者负责实施落地</p></blockquote> <ul><li>负责 Native 和 JS 之间的相互调用(消息通信)</li> <li>持有<code>JSExecutor</code></li> <li>实例化所有在 RCTBridge 里面注册了的<code>native node_modules</code></li> <li>创建 JS 运行环境, 注入<code>native hooks</code> 和<code>modules</code>, 执行 JS bundle script</li> <li>管理 JS run loop, 批量把所有 JS 到 native 的调用翻译成<code>native invocations</code></li> <li>批量管理原生代码到 JS 的调用，把这些调用翻译成 JS 消息发送给<code>JS executor</code></li></ul> <h3 id="_5-5-rctjavascriptloader"> 5.5 RCTJavaScriptLoader</h3> <blockquote><p>这是实现远程代码加载的核心。热更新，开发环境代码加载，静态<code>jsbundle</code>加载都离不开这个工具。</p></blockquote> <ul><li>从指定的地方(<code>bundle</code>, <code>http server</code>)加载 <code>script bundle</code></li> <li>把加载完成的脚本用<code>string</code>的形式返回</li> <li>处理所有获取代码、打包代码时遇到的错误</li></ul> <h3 id="_5-6-rctcontextexecutor"> 5.6 RCTContextExecutor</h3> <ul><li>封装了基础的 JS 和原生代码互掉和管理逻辑，是 JS 引擎切换的基础。通过不同的 RCTCOntextExecutor 来适配不同的 JS Engine，让我们的 React JS 可以在 iOS、Android、chrome 甚至是自定义的 js engine 里面执行。这也是为何我们能在 chrome 里面直接调试 js 代码的原因</li> <li>管理和执行所有 N2J 调用</li></ul> <h3 id="_5-7-rctmoduledata"> 5.7 RCTModuleData</h3> <ul><li>加载和管理所有和 JS 有交互的原生代码。把需要和 JS 交互的代码按照一定的规则自动封装成 JS 模块</li> <li>收集所有桥接模块的信息，供注入到 JS 运行环境</li></ul> <h3 id="_5-8-rctmodulemethod"> 5.8 RCTModuleMethod</h3> <blockquote><p>记录所有原生代码的导出函数地址(JS 里面是不能直接持有原生对象的)，同时生成对应的字符串映射到该函数地址。JS 调用原生函数的时候会通过 message 的形式调用过来</p></blockquote> <ul><li>记录所有的原生代码的函数地址，并且生成对应的字符串映射到该地址</li> <li>记录所有的 block 的地址并且映射到唯一的一个 id</li> <li>翻译所有<code>J2N call</code>，然后执行对应的 native 方法</li></ul> <blockquote><ul><li>如果是原生方法的调用则直接通过方法名调用，MessageQueue 会帮忙把 Method 翻译成 MethodID, 然后转发消息给原生代码，传递函数签名和参数给原生 MessageQueue, 最终给 RCTModuleMethod 解析调用最终的方法</li> <li>如果 JS 调用的是一个回调 block，MessageQueue 会把回调对象转化成一个一次性的 block id, 然后传递给 RCTModuleMethod, 最终由 RCTModuleMethod 解析调用。基本上和方法调用一样，只不过生命周期会不一样，block 是动态生成的，要及时销毁，要不然会导致内存泄漏</li></ul></blockquote> <blockquote><p>实际上是不存在原生 MessageQueue 对象模块的，JS 的 MessageQueue 对应到原生层就是 RCTModuleData &amp; RCTModuleMethod 的组合, MessageQueue 的到原生层的调用先经过 RCTModuleData 和 RCTModuleMethod 翻译成原生代码调用，然后执行</p></blockquote> <h3 id="_5-9-messagequeue"> 5.9 MessageQueue</h3> <ul><li>这是核心中的核心。整个 react native 对浏览器内核是未做任何定制的，完全依赖浏览器内核的标准接口在运作。它怎么实现 UI 的完全定制的呢？它实际上未使用浏览器内核的任何 UI 绘制功能，注意是未使用 UI 绘制功能。它利用 javascript 引擎强大的 DOM 操作管理能力来管理所有 UI 节点，每次刷新前把所有节点信息更新完毕以后再给 yoga 做排版，然后再调用原生组件来绘制。javascript 是整个系统的核心语言。</li> <li>我们可以把浏览器看成一个盒子，javascript 引擎是盒子里面的总管，DOM 是 javascript 引擎内置的，javascript 和 javascript 引擎也是无缝链接的。react native 是怎么跳出这个盒子去调用外部原生组件来绘制 UI 的呢？秘密就在 MessageQueue。</li> <li>javascript 引擎对原生代码的调用都是通过一套固定的接口来实现，这套接口的主要作用就是记录原生接口的地址和对应的 javascript 的函数名称，然后在 javascript 调用该函数的时候把调用转发给原生接口</li></ul> <h2 id="六、react-native-初始化"> 六、React Native 初始化</h2> <blockquote><p><code>React Native</code>的初始化从<code>RootView</code>开始，默认在<code>AppDelegate.m:- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code> 里面会有<code>RootViewd</code>的初始化逻辑，调试的时候可以从这里入手</p></blockquote> <p><strong>React Native 的初始化分为几个步骤</strong></p> <ul><li>原生代码加载</li> <li><code>JS Engine</code>初始化(生成一个空的 JS 引擎)</li> <li>JS 基础设施初始化. 主要是 require 等基本模块的加载并替换 JS 默认的实现。自定义<code>require</code>, <code>Warning window</code>, <code>Alert window</code>, <code>fetch</code>等都是在这里进行的。基础设施初始化好以后就可以开始加载 js 代码了</li> <li>遍历加载所有要导出给 JS 用的原生模块和方法, 生成对应的 JS 模块信息，打包成 json 的格式给 JS Engine, 准确地说是给 MessageQueue.</li></ul> <p><strong>这里需要提一下的是</strong></p> <blockquote><p>这里的导出是没有对象的，只有方法和模块。JS 不是一个标准的面向对象语言，刚从 Java 转 JavaScript 的同学都会在面向对象这个概念上栽跟头，这里特别提醒一下</p></blockquote> <h3 id="_6-1-原生代码初始化"> 6.1 原生代码初始化</h3> <blockquote><p>这里讨论的主要是 RN 相关的原生代码和用户自定义的 RN 模块的原生代码的加载和初始化。原生代码初始化主要分两步</p></blockquote> <ul><li>静态加载。iOS 没有动态加载原生代码的接口，所有的代码都在编译的初期就已经编译为静态代码并且链接好，程序启动的时候所有的原生代码都会加载好。这是原生代码的静态加载，iOS 里面没有动态加载原生代码的概念，这也是为何没有静态代码热更新的原因</li> <li>RN 模块解析和注入 JS。这是加载的第二步。在 RootView 初始化的时候会遍历所有被标记为 RCTModule 的原生模块，生成一个 json 格式的模块信息，里面包含模块名称和方法名称，然后注入到 JS Engine, 由 MessageQueue 记录下来。原生代码在生成 json 模块信息的时候同时会在原生代码这边维护一个名称字典，用来把模块和方法的名称映射到原生代码的地址上去，用于 JS 调用原生代码的翻译</li></ul> <h3 id="_6-2-javascript-环境初始化"> 6.2 Javascript 环境初始化</h3> <ul><li>RN 的初始化是从 RCRootView 开始的，所有的绘制都会在这个 RootView 里面进行(Alert 除外)</li> <li>RootView 做的第一件事情就是初始化一个空的 JS Engine。 这个空的 JS Engine 里面包含一些最基础的模块和方法(fetch, require, alert 等), 没有 UI 绘制模块。 RN 的工作就是替换这些基础的模块和方法，然后把 RN 的 UI 绘制模块加载并注入到 JS Engine.</li></ul> <p><strong>JS Engine 不直接管理 UI 的绘制</strong></p> <ul><li>所有的绘制由原生控制的 UI 事件和 Timer 触发</li> <li>影响界面刷新的事件发生以后一部分直接由原生控件消化掉，直接更新原生控件。剩下的部分会通过<code>Bridge</code>派发给 MessageQueue，然后在 JS 层进行业务逻辑的计算，再由<code>React</code>来进行 Virtual Dom 的管理和更新。<code>Virtual Dom</code>再通过 MessageQueue 发送重绘指令给对应的原生组件进行 UI 更新</li></ul> <h3 id="_6-3-nativemodules-加载"> 6.3 NativeModules 加载</h3> <ul><li>在 OC 里面，所有 NativeModules 要加载进 JS Engine 都必须遵循一定的协议(protocol)。</li> <li>模块(OC 里面的类)需要声明为, 然后在类里面还必须调用宏 RCT_EXPORT_MODULE() 用来定义一个接口告诉 JS 当前模块叫什么名字。这个宏可以接受一个可选的参数，指定模块名，不指定的情况下就取类名。</li> <li>对应的 JS 模块在初始化的时候会调用原生类的[xxx new]方法- 模块声明为<code>&lt;RCTBridgeModule&gt;</code>后只是告诉 Native Modules 这有一个原生模块，是一个空的模块。要导出任何方法给 JS 使用都必须手动用宏 RCT_EXPORT_METHOD 来导出方法给 JS 用.</li> <li>所有的原生模块都会注册到<code>NativeModules</code>这一个 JS 模块下面去，你如果想要让自己的模块成为一个顶级模块就必须再写一个 JS 文件封装一遍 NativeModules 里面的方法。</li> <li>你如果想自己的方法导出就默认成为顶级方法，那么你需要一个手动去调用 JSC 的接口，这个在前面章节有讲解。 不建议这样做，因为这样你会失去跨 JS 引擎的便利性。</li> <li>你可以导出常量到 JS 里面去, 模块初始化的时候会坚持用户是否有实现<code>constantsToExport</code> 方法, 接受一个常量词典</li></ul> <p>- (NSDictionary *)constantsToExport<br>
{<br>
return @{ @"firstDayOfTheWeek": @"Monday" };// JS 里面可以直接调用 ModuleName.firstDayOfTheWeek 获取这个常量<br>
}</p> <ul><li>常量只会在初始化的时候调用一次，动态修改该方法的返回值无效</li> <li>所有标记为 RCT_EXPORT_MODULE 的模块都会在程序启动的时候自动注册好这些模块，主要是记录模块名和方法名。只是注册，不一定会初始化。</li> <li><code>Native Modules</code>导出宏具体使用方法见官方文档<code>Native Modules</code></li></ul> <h3 id="_6-4-三个线程"> 6.4 三个线程</h3> <blockquote><p>React Native 有三个重要的线程:</p></blockquote> <ul><li>Shadow queue. 布局引擎(yoga)计算布局用的</li> <li>Main thread. 主线程。就是操作系统的 UI 线程。无论是 iOS 还是 android，一个进程都只有一个 UI 线程，我们常说的主线程. React Native 所有 UI 绘制也是由同一个 UI 线程来维护</li> <li><code>Javascript thread. javascript</code>线程。 大家都知道 javascript 是单线程模型，event 驱动的异步模型。React Native 用了 JS 引擎，所以也必需有一个独立的 js 线程. 所有 JS 和原生代码的交互都发生在这个线程里。死锁，异常也最容易发生在这个线程</li></ul> <blockquote><p>可以看到 Shadow queue 是 queue 而不是 thread, 在 iOS 里面 queue 是 thread 之上的一层抽象,GCD 里面的一个概念，创建 queue 的时候可以指定是并行的还是串行的。也就是说，一个 queue 可能对应多个 thread</p></blockquote> <h2 id="七、内部机制"> 七、内部机制</h2> <p><strong>内部机制</strong></p> <p><img src="https://poetries1.gitee.io/img-repo/2019/10/681.jpg" alt="" loading="lazy"></p> <p><strong>JS 用时序</strong></p> <p><img src="https://poetries1.gitee.io/img-repo/2019/10/682.png" alt="" loading="lazy"></p> <h2 id="八、总结"> 八、总结</h2> <h3 id="_8-1-react-native-框架分析"> 8.1 React Native 框架分析</h3> <p><img src="https://poetries1.gitee.io/img-repo/2019/10/683.png" alt="" loading="lazy"></p> <h3 id="_8-2-层次架构"> 8.2 层次架构</h3> <ul><li><strong>Java 层</strong>：该层主要提供了 Android 的 UI 渲染器<code>UIManager</code>（将 JavaScript 映射成<code>Android Widget</code>）以及一些其他的功能组件（例如：Fresco、Okhttp）等，在 java 层均封装为 Module，java 层核心 jar 包是 react-native.jar，封装了众多上层的 interface，如 Module，Registry，bridge 等</li> <li><strong>C++层</strong>：主要处理 Java 与 JavaScript 的通信以及执行 JavaScript 代码工作，该层封装了 JavaScriptCore，执行对 js 的解析。基于<code>JavaScriptCore</code>，<code>Web</code>开发者可以尽情使用 ES6 的新特性，如 class、箭头操作符等，而且 React Native 运行在<code>JavaScriptCore</code>中的，完全不存在浏览器兼容的情况。Bridge 桥接了 java ， js 通信的核心接口。JSLoader 主要是将来自 assets 目录的或本地 file 加载 javascriptCore，再通过<code>JSCExectutor</code>解析 js 文件</li> <li><strong>Js 层</strong>：该层提供了各种供开发者使用的组件以及一些工具库。<br> <code>Component</code>：Js 层通 js/jsx 编写的<code>Virtual Dom</code>来构建<code>Component</code>或 Module，Virtual DOM 是 DOM 在内存中的一种轻量级表达方式，可以通过不同的渲染引擎生成不同平台下的 UI。component 的使用在 React 里极为重要, 因为 component 的存在让计算 DOM diff 更高效。<br>
ReactReconciler : 用于管理顶层组件或子组件的挂载、卸载、重绘</li></ul> <blockquote><p>注：JSCore，即 JavaScriptCore，JS 解析的核心部分，IOS 使用的是内置的<code>JavaScriptCore</code>，Androis 上使用的是 <a href="https://webkit.org" target="_blank" rel="noopener noreferrer">https://webkit.org<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> 家的 jsc.so。</p></blockquote> <p><strong>Java 层核心类及原理，如下所示</strong></p> <p><strong>ReactContext</strong></p> <ul><li>ReactContext 继承于 ContextWrapper，是 ReactNative 应用的上下文，通过 getContext()去获得，通过它可以访问 ReactNative 核心类的实现。</li></ul> <p><strong>ReactInstanceManager</strong></p> <ul><li><code>ReactInstanceManager</code>是 ReactNative 应用总的管理类，创建<code>ReactContext</code>、<code>CatalystInstance</code>等类，解析<code>ReactPackage</code>生成映射表，并且配合<code>ReactRootView</code>管理 View 的创建与生命周期等功能。</li></ul> <p><strong>ReactRootView</strong></p> <ul><li>为启动入口核心类，负责监听及分发事件并重新渲染元素，App 启动后，其将作为 App 的<code>root view</code>。</li></ul> <p><strong>CatalystInstance</strong></p> <ul><li><code>CatalystInstance</code>是<code>ReactNative</code>应用 Java 层、C++层、JS 层通信总管理类，总管 Java 层、JS 层核心<code>Module</code>映射表与回调，三端通信的入口与桥梁。</li></ul> <p><strong>JavaScriptModule</strong></p> <ul><li><code>JavaScriptModule</code>是<code>JS Module</code>，负责 JS 到 Java 的映射调用格式声明，由<code>CatalystInstance</code>统一管理。</li></ul> <p><strong>NativeModule</strong></p> <ul><li><code>NativeModule</code>是<code>java Module</code>，负责 Java 到 Js 的映射调用格式声明，由<code>CatalystInstance</code>统一管理。</li></ul> <p><strong>JavascriptModuleRegistry</strong></p> <ul><li>JS Module 映射表,负责将所有 JavaScriptModule 注册到 CatalystInstance，通过 Java 动态代理调用到 Js。</li></ul> <p><strong>NativeModuleRegistry</strong></p> <ul><li>是 Java Module 映射表,即暴露给 Js 的 API 集合。</li></ul> <p><strong>CoreModulePackage</strong></p> <ul><li>定义核心框架模块，创建<code>NativeModules&amp;JsModules</code></li></ul> <h3 id="_8-3-启动过程的解析"> 8.3 启动过程的解析</h3> <ol><li>ReactInstanceManager 创建时会配置应用所需的 java 模块与 js 模块，通过 ReactRootView 的 startReactApplication 启动 APP。</li> <li>在创建 ReactInstanceManager 同时会创建用于加载 JsBundle 的 JSBundlerLoader，并传递给 CatalystInstance。</li> <li>CatalystInstance 会创建 Java 模块注册表及 Javascript 模块注册表，并遍历实例化模块。</li> <li>CatalystInstance 通过 JSBundlerLoader 向 Node Server 请求 Js Bundle，并传递给 JSCJavaScriptExectutor，最后传递给 javascriptCore，再通过 ReactBridge 通知 ReactRootView 完成渲染</li></ol> <h3 id="_8-4-js-与-java-通信机制"> 8.4 Js 与 Java 通信机制</h3> <blockquote><p>Java 与 Js 之间的调用，是以两边存在两边存在同一份模块配置表，最终均是将调用转化为{moduleID,methodID，callbackID，args}，处理端在模块配置表里查找注册的模块与方法并调用。</p></blockquote> <p><strong>Java 调用 Js</strong></p> <blockquote><p>Java 通过注册表调用到 CatalystInstance 实例，透过 ReactBridge 的 jni，调用到 Onload.cpp 中的 callFunction，最后通过 javascriptCore，调用 BatchedBridge.js，根据参数｛moduleID,methodID｝require 相应 Js 模块执行。流程如下图：</p></blockquote> <p><img src="https://poetries1.gitee.io/img-repo/2019/10/684.png" alt="" loading="lazy"></p> <p><strong>Js 调用 Java</strong></p> <blockquote><p>如果消息队列中有等待 Java 处理的逻辑，而且 Java 超过 5ms 都没有来取走，那么 JavaScript 就会主动调用 Java 的方法,在需要调用调 Java 模块方法时，会把参数｛moduleID,methodID｝等数据存在 MessageQueue 中，等待 Java 的事件触发，把 MessageQueue 中的｛moduleID,methodID｝返回给 Java，再根据模块注册表找到相应模块处理。流程如下图：</p></blockquote> <p><img src="https://poetries1.gitee.io/img-repo/2019/10/685.webp" alt="" loading="lazy"></p> <h2 id="九、更多参考"> 九、更多参考</h2> <ul><li><a href="https://juejin.im/post/5a6460f8f265da3e4f0a446d" target="_blank" rel="noopener noreferrer">React Native for Android 原理分析与实践：实现原理<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li> <li><a href="https://www.jianshu.com/p/e220e1f34a0b" target="_blank" rel="noopener noreferrer">深入剖析 JavaScriptCore<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[用 electron 实现第三方网页客户端]]></title>
            <description><![CDATA[Electron 是一个使用 JavaScript, HTML 和 CSS 等 Web 技术创建原生程序的框架，它负责比较难搞的部分，你只需把精力放在你的应用的核心上即可。]]></description>
            <link>https://www.bougieblog.cn/2020/02/10/%E7%94%A8-electron-%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BD%91%E9%A1%B5%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
            <guid isPermaLink="true">https://www.bougieblog.cn/2020/02/10/%E7%94%A8-electron-%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BD%91%E9%A1%B5%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid>
            <pubDate>Mon, 10 Feb 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="https://www.bougieblog.cn/images/2020/02/10/2.jpeg" alt="" width="1200" height="578" loading="lazy"></p> <p></p><div class="table-of-contents"><ul><li><a href="#为什么要做第三方客户端">为什么要做第三方客户端</a></li><li><a href="#从哪些方面优化第三方客户端体验">从哪些方面优化第三方客户端体验</a></li><li><a href="#用-electron-实现第三方网页客户端">用 Electron 实现第三方网页客户端</a><ul><li><a href="#首先要创建一个隐藏的网页">首先要创建一个隐藏的网页</a></li><li><a href="#抓取隐藏网页中的接口">抓取隐藏网页中的接口</a></li><li><a href="#抓取隐藏网页中的-html-内容">抓取隐藏网页中的 html 内容</a></li></ul></li></ul></div><p></p> <h2 id="为什么要做第三方客户端"> 为什么要做第三方客户端</h2> <ul><li>首先是为了获得更好的用户体验。如下图所示，左侧是第三方微博客户端 <em>Share</em>，右侧是 <em>V2EX</em> 第三方客户端。两者的特点都是界面都很简洁，功能比较纯粹。早期也有很多第三方贴吧 APP、视频软件 APP，但是随着大厂流量战争越打越强，就对这些第三方 APP 进行了封杀。</li> <li>其次我们可以在第三方客户端中加入广告和捐赠功能，来获得一部分额外收入。🍭</li> <li>最后就是在有一定用户量后开源出来可以吸一波 Star。不过这个和上面有点矛盾，因为开源出来后你加入的广告就可能被别人去掉后重新编译打包了。甚至里面的捐赠支付二维码会被改成其他人的二维码。这一点就看个人取舍了。</li></ul> <img src="https://www.bougieblog.cn/images/2020/02/12/1.png" alt="" class="styled-img styled-img-center styled-img-shadow" style="width:80%;"> <h2 id="从哪些方面优化第三方客户端体验"> 从哪些方面优化第三方客户端体验</h2> <ol><li>使客户端功能更纯粹。现在无论什么 APP 都要加新闻、直播、钱包、小视频的功能（说的就是微信、百度、微博这些毒瘤 😡）。我们封装第三方客户端时首当其冲就是要去掉这些无用功能。</li> <li>去除广告。幸运破解器也可以帮助去除，不过成功率较低。</li> <li>使用贴合原生系统的设计风格。安卓使用 material design，苹果使用 cupertino 设计风格（这个名子来自 flutter，官方没有具体名子）。</li> <li>动画贴近原生。使用系统级的过渡动画，这样会使 APP 界面切换更流畅。如何检测动画是否是系统级的？在开发者选项中将动画速度切换成 0.5 倍，如果 APP 的动画速度也变慢了，说明动画是系统级的。在 flutter 中，由于控件都是使用 Skia 绘制的，而非原生控件，动画引擎也是内建的，所以无法使用系统内建动画，跟系统有一股割裂感。这也是我不喜欢 flutter 的一点。</li> <li>增加特色功能。如主题换肤、特殊权限破解（如看视频免 vip 等等，但是随着这些鉴权逐渐迁往服务端，现在基本不可能实现了，只能想办法找一些漏洞）。</li></ol> <h2 id="用-electron-实现第三方网页客户端"> 用 Electron 实现第三方网页客户端</h2> <p>Electron 本身便是一个浏览器，在实现第三方网页客户端上有天然优势。传统方法抓取网页 api 的方式是尽可能的模拟请求头，但是在 electron 中我们可以用 webview 访问这个网页，然后将 webview 中的请求到的接口抓取过来。这样本质和直接访问原网页没有任何不同，但是我们可以在抓到接口后对页面进行自定义，添加更多自定义功能。</p> <h3 id="首先要创建一个隐藏的网页"> 首先要创建一个隐藏的网页</h3> <p>electron 里面据我所知的有两种方法。</p> <ol><li><p>通过 <code>BrowserWindow</code> 主进程中创建<br>
设置 <code>BrowserWindow</code> 的 show 属性为 <code>false</code>，此时 window 示例在主进程中，渲染进程想要获取数据需要通过 ipc 和主进程通信。这样做的的好处是在主进程中能更方便的进行更高权限的操作。</p></li> <li><p>在渲染进程中直接通过 <code>webview</code> 创建<br>
创建一个隐藏的 <code>webview</code> 去访问相关网页地址。好处非常明显，获取数据不用和主进程通信，操作基本在渲染进程完成。</p></li></ol> <h3 id="抓取隐藏网页中的接口"> 抓取隐藏网页中的接口</h3> <p>使用 debgguer 工具获取网页中请求的接口。这个 degguer 和 chrome 中的非常相似，不过是没有界面的。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> BrowserWindow <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span>debugger<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token string">'1.1'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Debugger attach failed : '</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span>debugger<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'detach'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Debugger detached due to : '</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span>debugger<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> method<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'Network.requestWillBeSent'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'https://www.github.com'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span>debugger<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span>debugger<span class="token punctuation">.</span><span class="token function">sendCommand</span><span class="token punctuation">(</span><span class="token string">'Network.enable'</span><span class="token punctuation">)</span>
</code></pre></div><p>只有运行 attach 方法后，接口才会被捕捉到，类似 chrome 中不开启开发者工具就不会捕捉请求。抓取到想要的数据后需要运行 detach 方法，不然内存会爆表。</p> <h3 id="抓取隐藏网页中的-html-内容"> 抓取隐藏网页中的 html 内容</h3> <p>使用 <code>executeJavaScript</code> 方法获取 dom 元素，在页面加载完成后执行。</p> <div class="language-js extra-class"><pre class="language-js"><code>win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'did-finish-load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token string">'document.getElementById("username").innerHTML'</span>
  win<span class="token punctuation">.</span>webContents
    <span class="token punctuation">.</span><span class="token function">executeJavaScript</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">username</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre></div><p>有以上两个方法肯定能够很轻松的制作出网页第三方客户端，如果有时间和精力的话 🤟</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[十二种常见算法思想汇总]]></title>
            <description><![CDATA[算法：枚举、递推、递归、分治、贪心、试探法、动态迭代和模拟等算法思想。]]></description>
            <link>https://www.bougieblog.cn/2020/01/02/%E5%8D%81%E4%BA%8C%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3%E6%B1%87%E6%80%BB/</link>
            <guid isPermaLink="true">https://www.bougieblog.cn/2020/01/02/%E5%8D%81%E4%BA%8C%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3%E6%B1%87%E6%80%BB/</guid>
            <pubDate>Thu, 02 Jan 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="https://www.bougieblog.cn/images/2020/01/02/1.jpeg" alt="" width="1200" height="582" loading="lazy"></p> <blockquote><p>算法：枚举、递推、递归、分治、贪心、试探法、动态迭代和模拟等算法思想。</p></blockquote> <p>原文链接：<a href="https://www.w3xue.com/exp/article/201812/14238.html" target="_blank" rel="noopener noreferrer">12 种常见算法思想汇总<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <h2 id="一、枚举算法思想-暴力算法"> 一、枚举算法思想（暴力算法）</h2> <p>将问题的所有可能答案一一列举，根据判断条件判断此答案是否合适，一般用循环实现。</p> <p>经典运用：百钱买百鸡、填写运算符</p> <h2 id="二、递推算法思想"> 二、递推算法思想</h2> <ol><li>顺推法：从已知条件出发，逐步推算出要解决问题的方法。</li> <li>逆推法：从已知结果出发，用迭代表达式逐步推算出问题开始的条件，即顺推法的逆过程。</li></ol> <p>经典运用：斐波那契数列（顺推法）、银行存款（逆推法）</p> <h2 id="三、递归算法思想"> 三、递归算法思想</h2> <ol><li>递归过程一般通过函数或子过程实现；</li> <li>递归算法在函数或子过程的内部，直接或间接调用自己的算法</li> <li>递归算法实际上是把问题转化为规模缩小了的同类问题的子问题，然后再递归调用函数或过程来表示问题的解</li></ol> <p>注意：必须有一个明确的递归结束条件；如果递归次数过多，容易造成栈溢出。</p> <p>经典运用：汉诺塔问题、阶乘问题</p> <h2 id="四、分治算法思想"> 四、分治算法思想</h2> <p>将一个规模为 N 的问题分解为 K 个规模较小的子问题，这些子问题相互独立且与原问题性质相同。只要求出子问题的解，就可得到原问题的解。</p> <p>一般步骤：</p> <ol><li>分解，将要解决的问题划分成若干个规模较小的同类问题</li> <li>求解，当子问题划分得足够小时，用较简单的方法解决</li> <li>合并，按原问题的要求，将子问题的解逐层合并构成原问题的解</li></ol> <p>经典运用：大数相乘问题、比赛日程安排，归并排序；最大子段和问题</p> <h2 id="五、贪心算法思想"> 五、贪心算法思想</h2> <p>从问题的某一个初始解出发，逐步逼近给定的目标，以便尽快求出更好的解。</p> <p>局限：</p> <p>不能保证最后的解是最优的；</p> <p>不能求最大最小解问题；</p> <p>只能求满足某些约束条件的可行解范围。</p> <p>基本过程：</p> <ol><li>从问题的某一初始解出发</li> <li>while 能向给定总目标前进一步</li> <li>求出可行解的一个解元素</li> <li>由所有解元素组合成问题的一个可行解
经典运用：装箱问题、找零方案，活动选择问题、背包问题、多机调度问题</li></ol> <h2 id="六、试探算法-回溯法"> 六、试探算法（回溯法）</h2> <p>在试探算法中，放弃当前候选解，并继续寻找下一个候选解的过程称为回溯。扩大当前候选解的规模，以继续试探的过程称为向前试探。</p> <p>（为求得问题的正确解，会先委婉地试探某一种可能情况。在进行试探过程中，一旦发现原来选择的假设情况是不正确的，马上会自觉地退回一步重新选择，然后继续向前试探。反复进行，直到得到解或证明无解时才死心）</p> <p>基本步骤：</p> <ol><li>针对所给问题，定义问题的解空间</li> <li>确定易于搜索的解空间结构</li> <li>以深度优先方式搜索解空间，并在搜索过程中用剪枝函数避免无效搜索</li></ol> <p>经典运用：八皇后问题、29 选 7 彩票组合，0-1 背包、N 皇后问题</p> <h2 id="七、迭代算法-辗转法"> 七、迭代算法（辗转法）</h2> <p>是一种不断用变量的旧值递推新值的过程，解决问题时总是重复利用一种方法。</p> <ol><li>确定迭代变量：直接或间接地不断由旧值递推出新值的变量</li> <li>建立迭代关系式：新值与旧值的公式或关系。（解决迭代问题的关系）</li> <li>对迭代过程进行控制：确定迭代过程什么时候结束</li></ol> <p>所需的迭代次数是个确定值，可以计算出来：可以构建一个固定次数的循环来实现对迭代过程的控制；</p> <p>所需的迭代次数无法确定：需要进一步分析出用来结束迭代过程的条件。</p> <p>经典运用：求平方根问题</p> <h2 id="八、模拟算法思想"> 八、模拟算法思想</h2> <p>对真实事物或者过程的虚拟。</p> <p>经典运用：猜数字游戏、掷骰子问题</p> <h2 id="九、动态规划法"> 九、动态规划法</h2> <p>关键词：递归（递归式）、表记录（已解决的子问题的答案）、根据子问题求解原问题的解（子问题不独立）、最优解（可选项）</p> <p>步骤：</p> <ol><li>找出最优解的性质，刻画其结构特征；</li> <li>递归地定义最优解；</li> <li>以自底向上的方式计算出最优值；</li> <li>根据计算最优值时得到的信息，构造一个最优解</li></ol> <p>只需求出最优值，步骤 4 可以省略；若需求出问题的一个最优解，则必须执行步骤 4。</p> <p>适用环境：</p> <ol><li>最优子结构。一个问题的最优解包含了其子问题的最优解。</li> <li>重叠子问题。原问题的递归算法可以反复地解同样的子问题，而不是总是产生新的子问题</li></ol> <p>示例：0-1 背包问题；矩阵链乘问题；最长公共子序列（LCS）；</p> <h2 id="十、分支界限法"> 十、分支界限法</h2> <p>关键字：解空间（广度优先、最小耗费优先）、界限函数（队列式、优先队列式）</p> <p>步骤：</p> <ol><li>针对所给问题，定义问题的解空间。问题的解空间应至少包含问题的一个（最优）解</li> <li>确定易于搜索的解空间结构。通常将解空间表示为树、图；解空间树的第 i 层到第 i+1 层边上的标号给出了变量的值；从树根到叶子的任一路径表示解空间的一个元素。</li> <li>以广度优先或最小耗费优先的方式搜索整个解空间。每个活节点只有一次机会成为扩展节点，活节点一旦成为扩展节点，其余儿子节点被加入活节点表中。（以此方式递归搜索）</li></ol> <p>界限函数：分支界限法的核心。尽可能多、尽可能早地“杀掉”不可能产生最优解的活节点。好的界限函数可以大大减少问题的搜索空间，大大提高算法的效率。</p> <ol><li>队列式（FIFO）分支界限法。先进先出</li> <li>优先队列式分支界限法。组织一个优先队列，按优先级选取。通常用最大堆来实现最大优先队列，最小堆来实现最小优先队列。</li></ol> <h2 id="十一、概率算法"> 十一、概率算法</h2> <p>关键词：随机性选择、小概率错误（运行时间大幅减少）、不同解（对同一问题求解两次，可能得到完全不同的解，且所需时间、结果可能会有相当大的差别）</p> <p>基本特征：</p> <ol><li>输入包括两部分。一，原问题的输入；二，供算法进行随机选择的随机数序列</li> <li>运行过程中，包括一处或多处随机选择，根据随机值来决定算法的运行</li> <li>结果不能保证一定是正确的，但可以限制出错率。</li> <li>不同的运行过程中，对于相同的输入实例可以有不同的结果，执行时间也可能不同。</li></ol> <p>分类：</p> <ol><li>数值概率算法。常用于数值问题的求解。近似解，近似解的精度随计算时间的增加不断提高。</li> <li>蒙特卡罗（Monte Carlo）算法。精确解，解未必是正确的，正确的概率依赖于算法所用的时间。一般情况下，无法有效地判定所得到的解是否肯定正确。</li> <li>拉斯维加斯（LasVegas）算法。一旦找到解，一定是正确解。找到的概率随计算时间的增加而提高。对实例求解足够多次，使求解失效的概率任意小。</li> <li>舍伍德（Sherwood）算法。总能求得问题的一个解，且所求得的解总是正确的。设法消除最坏情形与特定实例之间的关联性。多用于最快情况下的计算复杂度与其在平均情况下的计算复杂度差别较大。</li></ol> <h2 id="十二、近似算法"> 十二、近似算法</h2> <p>关键词：近似解、解的容错界限（近似最优解与最优解之间相差的程度）、不存在多项式时间算法</p> <p>基本思想：放弃求最优解，用近似最优解替代最优解。使算法简化，时间复杂度降低</p> <p>衡量性能的标准：</p> <ol><li>算法的时间复杂度。时间复杂度必须是多项式阶的</li> <li>解的近似程度。与近似算法本身、问题规模、不同的输入实例有关。</li></ol> <p>示例：NP 问题、定点覆盖问题、TSP、子集和数问题、</p> <p>以上算法思想分的细，有些算法思想其实可以合并一类。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React 服务端渲染 搭建同构应用]]></title>
            <description><![CDATA[React 在服务端的渲染]]></description>
            <link>https://www.bougieblog.cn/2019/12/16/react-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93-%E6%90%AD%E5%BB%BA%E5%90%8C%E6%9E%84%E5%BA%94%E7%94%A8/</link>
            <guid isPermaLink="true">https://www.bougieblog.cn/2019/12/16/react-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93-%E6%90%AD%E5%BB%BA%E5%90%8C%E6%9E%84%E5%BA%94%E7%94%A8/</guid>
            <pubDate>Mon, 16 Dec 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="https://www.bougieblog.cn/images/2019/12/25/1.jpeg" alt="" width="1200" height="452" loading="lazy"></p> <h2 id="为什么要使用服务端渲染-ssr-的优点"> 为什么要使用服务端渲染（SSR 的优点）</h2> <ul><li>更快的首屏加载速度</li> <li>更好的 SEO</li></ul> <h2 id="react-如何服务端渲染"> React 如何服务端渲染</h2> <h3 id="服务端渲染-ssr-和客户端渲染-csr-的区别"> 服务端渲染（SSR）和客户端渲染（CSR）的区别</h3> <ul><li>服务端没有 dom，无法直接将 react 组件 render 到一个 dom 节点</li> <li>服务端无法绑定事件到 dom 元素</li> <li>服务端没有页面路由</li></ul> <h3 id="什么是同构"> 什么是同构</h3> <ul><li>同构既是服务端渲染结果和客户端渲染结果保持一致</li> <li>同构大致上分为路由同构和数据同构</li> <li>同构完成后，客户端只需要使用 <code>ReactDOM.hydrate</code> 完成事件绑定即可</li></ul> <h3 id="在服务端运行-react"> 在服务端运行 React</h3> <ul><li><code>react-dom/server</code> 提供 <code>renderToString</code>, <code>renderToStaticMarkup</code>, <code>renderToNodeStream</code>, <code>renderToStaticNodeStream</code> 四种方法用于在服务端渲染</li> <li><code>renderToString</code> 和 <code>renderToStaticMarkup</code> 可在服务端和客户端运行，左右都是将一个 React 组件转化为静态 html。官方文档说两者的区别是 <code>renderToStaticMarkup</code> 不会在 React 内部创建的额外 DOM 属性，例如 <code>data-reactroot</code>，但如果有交互的话，不要使用此方法。个人在实际使用 16.10 版本中感受到两者的区别是：<code>renderToString</code> 也不会生成额外的 DOM 属性，但是会生成额外的空注释；<code>renderToStaticMarkup</code> 则是非常干净、没有多余东西的 html，然而在客户端使用 <code>ReactDOM.hydrate</code> 时会报错客户端渲染结果和服务端渲染结果不一致。官方推荐的是使用 <code>renderToStaticMarkup</code> 来做静态站点生成器，真正的服务端渲染还是需使用 <code>renderToString</code></li> <li><code>renderToNodeStream</code> 和 <code>renderToStaticNodeStream</code> 返回一个可读流。仅可在 Node 端使用</li></ul> <h2 id="路由同构"> 路由同构</h2> <p>路由同构需保证访问同一个地址时，客户端需要渲染的组件和服务端是一致的。</p> <h3 id="配置式-目录约定式"> 配置式（目录约定式）</h3> <ul><li>此种方法的原理是客户端和服务端使用同一份路由配置。客户端根据此配置生成 Route 组件，服务端根据此配置查找 url 对应的组件</li> <li>next.js 使用的既是这种方式，优点是比较简单，缺点是每个页面必须都引入布局组件。有公共的 Provider 等等也必须每个页面重复引入</li></ul> <h3 id="使用-staticrouter"> 使用 StaticRouter</h3> <ul><li>需要 React Router 版本 &gt;= 4</li> <li>可以方便的将一个 csr app 转化为 ssr app</li></ul> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">'http'</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">'react-dom/server'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StaticRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router'</span>

http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// This context object contains the results of the render</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>StaticRouter location<span class="token operator">=</span><span class="token punctuation">{</span>req<span class="token punctuation">.</span>url<span class="token punctuation">}</span> context<span class="token operator">=</span><span class="token punctuation">{</span>context<span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>StaticRouter<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span>
    <span class="token comment">// context.url will contain the URL to redirect to if a &lt;Redirect&gt; was used</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">Location</span><span class="token operator">:</span> context<span class="token punctuation">.</span>url
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="数据同构"> 数据同构</h2> <p>数据同构指服务端渲染和客户端渲染的数据保持一致。若渲染结果不一致 <code>ReactDOM</code> 在开发环境下会抛出警告。</p> <p>数据同构往往采用数据注水的方式来实现，即服务端将渲染的数据嵌入 html，客户端拿到该数据后再进行客户端渲染。</p> <h3 id="配置式"> 配置式</h3> <ul><li>next js 使用的既是此种方法，在路由配置的基础上给每个组件添加静态 <code>getInitalProps</code> 方法。<code>getInitialProps</code> 方法在服务端执行，将执行取得的数据注入根据路由配置查找到的组件之中即可。</li></ul> <h3 id="使用-context"> 使用 context</h3> <ul><li>和 StaticRouter 结合使用，在组件中获取对应 context 的值进行渲染即可</li> <li>客户端</li></ul> <div class="language-jsx extra-class"><pre class="language-jsx"><code>ReactDOM<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context.Propvider</span> <span class="token attr-name">context</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>window<span class="token punctuation">.</span>__INITIAL_STATE<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context.Provider</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">,
  document.getElementById('root')
)
</span></code></pre></div><ul><li>服务端</li></ul> <div class="language-jsx extra-class"><pre class="language-jsx"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StaticRouter</span></span> <span class="token attr-name">location</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>req<span class="token punctuation">.</span>url<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context.Propvider</span> <span class="token attr-name">context</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context.Provider</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StaticRouter</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
)
</span></code></pre></div><h2 id="打包和配置"> 打包和配置</h2> <p>在使用 Webpack 打包时，服务端和客户端使用的 dist 是不一样的。具体表现为：</p> <ul><li>客户端无法 require 一个 module，需要将所有依赖打包进 js bundle</li> <li>服务端可以 require 第三方 module，服务端的包不需要把第三方依赖打包进来</li> <li>开发环境下若服务端和客户端使用的 react 和 react-dom 不是同一个引用会报错</li> <li>服务端无法处理 css</li> <li>服务端的 js bundle 为一个 commonjs module</li></ul> <h3 id="客户端配置"> 客户端配置</h3> <p>和 spa 的 webpack 配置无二，需要注意客户端和服务端的入口稍有不同。可以将入口分为 <code>ClientEntry.jsx</code> 和 <code>ServerEntry.jsx</code></p> <ul><li><code>ClientEntry.jsx</code></li></ul> <div class="language-jsx extra-class"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> hydrate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Context'</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>

<span class="token function">hydrate</span><span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>window<span class="token punctuation">.</span>__INITIAL_STATE__<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><ul><li><code>ServerEntry.jsx</code></li></ul> <div class="language-jsx extra-class"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StaticRouter <span class="token keyword">as</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Context'</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span> <span class="token attr-name">location</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="服务端配置"> 服务端配置</h3> <p>打包为 node 模块，忽略 css 文件。使用 watch 每次更改文件时重新编译。用 externals 属性排除所有第三方包。</p> <div class="language-js extra-class"><pre class="language-js"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'node'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">'commonjs2'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.s?css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'ignore-loader'</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">externals</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../package.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="构建开发环境"> 构建开发环境</h2> <p>开发环境应有以下特性</p> <ul><li>页面的 html 是服务端渲染过的 html</li> <li>页面嵌入的 css 和 js 为客户端生成</li> <li>更改客户端代码时需要热更新</li></ul> <h3 id="客户端处理"> 客户端处理</h3> <p>由于客户端的生成的资源需要给服务端使用（包括客户端的 html），因此可以将客户端的 publicPath 设置成 ip 端口的形式供服务端使用。即</p> <div class="language-js extra-class"><pre class="language-js"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">'http://localhost:2999/'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样在开发环境下生成的 html 里面引入的 js 是加 origin 的。</p> <p>同时 devServer 需要允许资源跨域</p> <div class="language-js extra-class"><pre class="language-js"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">'Access-Control-Allow-Origin'</span><span class="token operator">:</span> <span class="token string">'*'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="服务端处理"> 服务端处理</h3> <p>服务端的 html 模板可以使用客户端开发环境生成的：</p> <div class="language-jsx extra-class"><pre class="language-jsx"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">resolveTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:2999/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在 renderMethod 中替换 <code>&lt;div id='root'&gt;&lt;/div&gt;</code> 即可。</p> <p>然后服务端访问 <code>http://localhost:3000</code> 即可访问经过 ssr 的客户端页面了。此时的 hmr 由于是引用自客户端的并且允许了跨域，所以依然生效。</p> <h2 id="构建生产环境"> 构建生产环境</h2> <h3 id="客户端"> 客户端</h3> <p>同普通 spa 一样构建即可。</p> <h3 id="服务端"> 服务端</h3> <p>此时的 template 应使用构建后的 template</p> <div class="language-jsx extra-class"><pre class="language-jsx"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">resolveTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'../dist/index.html'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="spa-和-ssr-二合一"> SPA 和 SSR 二合一</h2> <p>SPA 的好处是使用 <code>Link</code> 阻止了默认事件，切换页面时页面不会重新载入。然而在 SSR 项目中使用 <code>Link</code> 的话会导致页面跳转时不请求服务端，数据注水在客户端无法获取。</p> <p><code>Next.js</code> 对此的做法是封装了自己的 <code>Link</code>，使用 <code>Link</code> 可以预加载页面，原理是在页面嵌入 <code>&lt;link rel="prefetch" href="/xxx.js"&gt;</code> 来达到预加载的效果，这个 js 已经包含了要跳转页面的内容。跳转页面后页面实际的 html 没有改变，只是被预拉取的 js 修改了。这种方法常常被用于静态网站，例如本站使用的 vuepress 即采用了这种方法。然而使用这种办法没法做动态内容页，例如跟路由地址和数据库强相关的页面，因为这类页面文章内容都是用户发布的，不可能特地给每个页面都生成一个 js。</p> <h3 id="如何在跳转到跟路由地址和数据库强相关的页面时使用-link"> 如何在跳转到跟路由地址和数据库强相关的页面时使用 Link ？</h3> <ul><li>最简单的方法当然是使用 a 标签，这样会从服务端重新拉取页面，会获取到正确的页面注水数据</li> <li>第二种方法是在组件中判断，如果页面没有注水数据，则拉取接口获取数据</li> <li>使用第二种方法并不会影响 SEO，因为爬虫引擎每爬取一个链接，都会重新请求服务器</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Webpack 配置多页面国际化应用]]></title>
            <description><![CDATA[利用多页面来解决 SEO 问题，一种简化的服务端渲染方案]]></description>
            <link>https://www.bougieblog.cn/2019/11/20/webpack-%E9%85%8D%E7%BD%AE%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96%E5%BA%94%E7%94%A8/</link>
            <guid isPermaLink="true">https://www.bougieblog.cn/2019/11/20/webpack-%E9%85%8D%E7%BD%AE%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96%E5%BA%94%E7%94%A8/</guid>
            <pubDate>Wed, 20 Nov 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="https://www.bougieblog.cn/images/2019/12/01/12.jpeg" alt="" width="1200" height="800" loading="lazy"></p> <h2 id="多入口配置"> 多入口配置</h2> <p>通过读取文件结构来动态生成入口。务必使用对象写法，键名表示 <code>chunkName</code></p> <div class="language-javascript extra-class"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token function">collectEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">collectEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pagesDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/pages'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> fs
    <span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>pagesDir<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pageName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">chunkName</span><span class="token operator">:</span> pageName<span class="token punctuation">,</span>
      <span class="token literal-property property">entryFile</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>pagesDir<span class="token punctuation">,</span> pageName<span class="token punctuation">,</span> <span class="token string">'index.jsx'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>entries<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>item<span class="token punctuation">.</span>chunkName<span class="token punctuation">]</span><span class="token operator">:</span> item<span class="token punctuation">.</span>entryFile
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="多-html-文件输出"> 多 html 文件输出</h2> <p><code>plugins</code> 添加多个 <code>HtmlWebpackPlugin</code> 实例，添加 chunks 配置将只在页面注入当前页面的代码块，不设置 chunks 会注入所有页面代码块</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span><span class="token function">collectHtmls</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">collectHtmls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pagesDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/pages'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> templatesDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../public/templates'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> templateOutputsDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>pagesDir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pageName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span>pageName<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>templateOutputsDir<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>templatesDir<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="devserver-配置"> devServer 配置</h2> <p>多国家网站地址一般为 https://www.xxx.com/locale, 参考<a href="https://www.apple.com.cn/cn/" target="_blank" rel="noopener noreferrer">苹果官网<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> 和 <a href="https://www.microsoft.com/zh-cn/" target="_blank" rel="noopener noreferrer">微软官网<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>。所以我们需要处理一下重定向，也就是 devServer 的 historyApiFallback 项，需提前配置支持的国家。</p> <div class="language-javascript extra-class"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">rewrites</span><span class="token operator">:</span> <span class="token function">collectRewrites</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> avalibleLocales <span class="token operator">=</span> <span class="token string">'(cn|us|ru|id)'</span>

<span class="token keyword">function</span> <span class="token function">collectRewrites</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fs
    <span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/pages'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">^/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>avalibleLocales<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/?$</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.html</span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用 <code>react-router</code> 时 <code>basename</code> 需要配置为当前国家</p> <div class="language-jsx extra-class"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span> <span class="token attr-name">basename</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>locale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="多语言配置"> 多语言配置</h2> <p>使用 <code>React-Intl</code>配置多国语言包。为防止 <code>bundle</code> 体积过大，语言包用 <code>code spliting</code> 分割。注意语言包未加载时不要显示页面内容，否则页面会有闪烁。</p> <div class="language-jsx extra-class"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">Intl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>messages<span class="token punctuation">,</span> setMessages<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> loadLocaleData <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@/languages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>locale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>setMessages<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>language<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span>loadLocaleData<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> messages <span class="token operator">?</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">IntlProvider</span></span> <span class="token attr-name">messages</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span></span> <span class="token attr-name">locale</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>locale<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">IntlProvider</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="如何-seo"> 如何 SEO ?</h2> <p>使用多页面后由服务端渲染每个页面的 <code>title</code>, <code>description</code>, <code>keywords</code>。如果想要更进一步的 SEO 的话，页面内容也需要服务端渲染。</p> <h3 id="方法一"> 方法一</h3> <p>在页面配置结构化数据，结构化数据交给服务端渲染，示例 <a href="https://search.google.com/structured-data/testing-tool?utm_campaign=devsite&amp;utm_medium=jsonld&amp;utm_source=article" target="_blank" rel="noopener noreferrer">https://search.google.com/structured-data/<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p>此种方法仅适用于谷歌，百度可能有不同的解析规则。</p> <h3 id="方法二"> 方法二</h3> <p>页面内容交给服务端渲染，但是渲染后的结果隐藏。在 react-app 中用 <code>dangerouslySetInnerHTML=\{\{ __html: document.getElementById('ssr-home-first-screen') \}\}</code> 设置页面内容。不过可能会被搜索引擎识别为恶意 SEO 而遭到搜索引擎屏蔽。因此这种方法有风险。</p> <div class="language-html extra-class"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= lang %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= keywords %&gt;<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= description %&gt;<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>&lt;%= title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">[id^='ssr-']</span> <span class="token punctuation">{</span>
        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span> <span class="token comment">/* Setting this to 0 make it invisible for VoiceOver */</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span> <span class="token comment">/* Setting this to 0 make it invisible for VoiceOver */</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">clip</span><span class="token punctuation">:</span> <span class="token function">rect</span><span class="token punctuation">(</span>0 0 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ssr-home-first-screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>&lt;%= homeFirstScreen %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="方法三"> 方法三</h3> <p>由服务端渲染页面主体内容，其它部分由客户端渲染。将页面拆分成多个区域，客户端需执行多个 <code>ReactDOM.render</code> Function. 这样不存在被搜索引擎识别为恶意 SEO 的风险，缺点是比第一种方法麻烦。</p> <div class="language-html extra-class"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= lang %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= keywords %&gt;<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= description %&gt;<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>&lt;%= title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ssr-home-first-screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>&lt;%= homeFirstScreen %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="结语"> 结语</h2> <p>如果网站比较简单，例如新闻、博客类，那么值得用上述方法一试。如果网站比较复杂，例如电商类，那还是老实用 SSR 比较好。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[记录一下周末写的 COS 命令行工具]]></title>
            <description><![CDATA[周末花了半天时间写了一个腾讯云 COS(对象存储) 命令行工具，当前还未完善，此文相当于是文档啦。]]></description>
            <link>https://www.bougieblog.cn/2019/11/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%91%A8%E6%9C%AB%E5%86%99%E7%9A%84-cos-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
            <guid isPermaLink="true">https://www.bougieblog.cn/2019/11/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%91%A8%E6%9C%AB%E5%86%99%E7%9A%84-cos-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
            <pubDate>Mon, 04 Nov 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="https://www.bougieblog.cn/images/2019/11/04/cos.png" alt="cos" width="1200" height="392" loading="lazy"></p> <blockquote><p>对象存储（Cloud Object Storage，COS）是由腾讯云推出的无目录层次结构、无数据格式限制，可容纳海量数据且支持 HTTP/HTTPS 协议访问的分布式存储服务。腾讯云 COS 的存储桶空间无容量上限，无需分区管理，适用于 CDN 数据分发、数据万象处理或大数据计算与分析的数据湖等多种场景。COS 提供网页端管理界面、多种主流开发语言的 SDK、API 以及命令行和图形化工具，并且兼容 S3 的 API 接口，方便用户直接使用社区工具和插件。</p></blockquote> <h2 id="installation"> Installation</h2> <p><code>npm i @bougiel/cos -g</code></p> <h2 id="cli"> CLI</h2> <h3 id="配置创建-cos-config"> 配置创建 - <code>cos config</code></h3> <p>目前可用的配置有：</p> <ul><li><code>cos config SecretId xxx</code> - 配置 SecretId</li> <li><code>cos config SecretKey xxx</code> - 配置 SecretKey</li> <li><code>cos config AppId xxx</code> - 配置 AppId，即将废弃，只用创建 Bucket 的时候会用到</li> <li><code>cos config Bucket xxx</code> - 选择一个 Bucket，操作一个 Bucket 里面的对象时需要提前配置</li> <li><code>cos config Region xxx</code> - 配置选择的 Bucket 区域</li></ul> <p>查看配置列表：</p> <ul><li><code>cos config --list</code></li></ul> <h3 id="存储桶操作-cos-bucket"> 存储桶操作 - <code>cos bucket</code></h3> <p>使用前需要提前配置 <code>SecretId</code> 和 <code>SecretKey</code>, 目前支持的命令有：</p> <ul><li><code>cos bucket</code> - 查看所有 Bucket 列表</li> <li><code>cos bucket create xxx --region ap-beijing</code> - 创建一个 Bucket ，需要提前配置 AppId</li> <li><code>cos delete xxx</code> - 删除一个空的 Bucket</li></ul> <h3 id="对象操作-cos-object"> 对象操作 - <code>cos object</code></h3> <p>使用前需要提前配置 <code>Bucket</code> 和 <code>Region</code>，切换 Bucket 时需要重新配置 <code>Bucket</code> 和 <code>Region</code>，目前支持的命令有：</p> <ul><li><code>cos object --list</code> - 查看所有对象</li> <li><code>cos object upload .</code> - 上传一个文件（夹），相对于当前目录</li></ul> <h2 id="node-api"> Node API</h2> <h3 id="cos-base-class-unexported"> <code>COS</code> - Base class, unexported</h3> <div class="language-ts extra-class"><pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IConfig</span> <span class="token punctuation">{</span>
  SecretKey<span class="token operator">:</span> <span class="token builtin">string</span>
  SecretId<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token constant">COS</span></span> <span class="token punctuation">{</span>
  cos<span class="token operator">:</span> <span class="token builtin">any</span>
  config<span class="token operator">:</span> IConfig
  <span class="token function">constructor</span><span class="token punctuation">(</span>config<span class="token operator">:</span> IConfig<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="cosbucket"> <code>COSBucket</code></h3> <p><strong><code>d.ts</code> file:</strong></p> <div class="language-ts extra-class"><pre class="language-ts"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">COS</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./COS'</span>
<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">COSBucket</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">COS</span></span> <span class="token punctuation">{</span>
  <span class="token function">list</span><span class="token punctuation">(</span>region<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
  <span class="token function">create</span><span class="token punctuation">(</span>bucketName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> appId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> region<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
  <span class="token keyword">delete</span><span class="token punctuation">(</span>bucketName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> region<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> COSBucket <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@bougiel/cos'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">COSBucket</span><span class="token punctuation">(</span><span class="token punctuation">{</span> SecretId<span class="token punctuation">,</span> SecredKey <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 查看所有 Bucket</span>
bucket<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>region<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>table<span class="token punctuation">)</span>
<span class="token comment">// 创建一个 Bucket</span>
bucket<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'1234'</span><span class="token punctuation">,</span> <span class="token string">'ap-beijing'</span><span class="token punctuation">)</span>
<span class="token comment">// 删除一个 Bucket</span>
bucket<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'test-1234'</span><span class="token punctuation">,</span> <span class="token string">'ap-beijing'</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="cosobject"> <code>COSObject</code></h3> <p><strong><code>d.ts</code> file:</strong></p> <div class="language-ts extra-class"><pre class="language-ts"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">COS</span><span class="token punctuation">,</span> IConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./COS'</span>
<span class="token keyword">interface</span> <span class="token class-name">IObjectConfig</span> <span class="token keyword">extends</span> <span class="token class-name">IConfig</span> <span class="token punctuation">{</span>
  Bucket<span class="token operator">:</span> <span class="token builtin">string</span>
  Region<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">COSObject</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">COS</span></span> <span class="token punctuation">{</span>
  bucketName<span class="token operator">:</span> <span class="token builtin">string</span>
  region<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>params<span class="token operator">:</span> IObjectConfig<span class="token punctuation">)</span>
  <span class="token function">list</span><span class="token punctuation">(</span>prefix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
  <span class="token function">upload</span><span class="token punctuation">(</span>uploadPath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> COSObject <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@bougiel/cos'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">COSObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> SecretId<span class="token punctuation">,</span> SecredKey<span class="token punctuation">,</span> Bucket<span class="token punctuation">,</span> Region <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 查看所有 object</span>
object<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>table<span class="token punctuation">)</span>
<span class="token comment">// 上传一个文件（夹）</span>
object<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="参考"> 参考</h2> <ul><li><a href="https://cloud.tencent.com/document/product/436/8629" target="_blank" rel="noopener noreferrer">COS Node SDK<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></li></ul>]]></content:encoded>
        </item>
    </channel>
</rss>